CREATE PROCEDURE OAG.OAGDB2LOAD
(
IN DB_Schema VARCHAR(200),
IN SELECTCLAUSE VARCHAR(32672),
IN MSGFILE VARCHAR(100),
OUT MESSAGETEXT VARCHAR(2048))
P1: BEGIN NOT ATOMIC
DECLARE  MainSQL VarChar(32672) default '';--
DECLARE LoadSQL VarChar(32672) default '';--
DECLARE db2load_VERSION_NUMBER INTEGER default 1;--
DECLARE db2load_SQLCODE INTEGER;--
DECLARE db2load_SQLMESSAGE VARCHAR(2048);--
DECLARE db2load_ROWS_READ BIGINT;--
DECLARE db2load_ROWS_SKIPPED BIGINT;--
DECLARE db2load_ROWS_LOADED BIGINT;--
DECLARE db2load_ROWS_REJECTED BIGINT;--
DECLARE db2load_ROWS_DELETED  BIGINT;--
DECLARE db2load_ROWS_COMMITTED BIGINT;--
DECLARE db2load_ROWS_PART_READ BIGINT;--
DECLARE db2load_ROWS_PART_REJECTED BIGINT;--
DECLARE db2load_ROWS_PART_PARTITIONED BIGINT;--
DECLARE db2load_MPP_LOAD_SUMMARY VARCHAR(32672);--
DECLARE SQLStmt VARCHAR(1000);--
SET MainSQL = 'DECLARE CURS CURSOR WITH HOLD FOR ' || SELECTCLAUSE || ' WITH UR';--
SET LoadSQL = 'LOAD FROM CURS OF CURSOR MESSAGES ' || MSGFILE || ' INSERT INTO ' || DB_Schema || ' NONRECOVERABLE ALLOW READ ACCESS ';--
SET SQLStmt = 'SET INTEGRITY FOR ' || DB_Schema || ' ALL IMMEDIATE UNCHECKED';--
EXECUTE IMMEDIATE SQLStmt;--
call sysproc.db2load(db2load_VERSION_NUMBER,
MainSQL,
LoadSQL,
db2load_SQLCODE,
db2load_SQLMESSAGE,
db2load_ROWS_READ,
db2load_ROWS_SKIPPED,
db2load_ROWS_LOADED,
db2load_ROWS_REJECTED,
db2load_ROWS_DELETED,
db2load_ROWS_COMMITTED,
db2load_ROWS_PART_READ,
db2load_ROWS_PART_REJECTED,
db2load_ROWS_PART_PARTITIONED,
db2load_MPP_LOAD_SUMMARY);--
EXECUTE IMMEDIATE SQLStmt;--
IF db2load_SQLCODE <> 0 Then
SET MESSAGETEXT = 'TABLE SEG_COMPONENT: ' || db2load_SQLMESSAGE || ' SQLCODE = ' || RTRIM(CHAR(db2load_SQLCODE)) || ' ROWS LOADED = ' || RTRIM(CHAR(db2load_ROWS_LOADED));--
End IF;--
END P1;

