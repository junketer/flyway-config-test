-- QUERY
-- documentation of the QUERY

SELECT booking_class_cd, default_config_class_cd FROM   snapshot.snap_booking_class_alt;
-- booking_class_cd is a key, used in iv_list_processor, PassengerClassCache, booking_class_cd elements read from LegSeg.booking_class_xml

SELECT carrier_id FROM   snapshot.snap_carrier_coding WHERE  scheme_carrier_cd = 'ZZZ'        AND carrier_coding_end_date > CURRENT DATE;
-- default carrier_id used when no carrier id is supplied to this key
WITH equipment_config      AS (SELECT equipment_config_id,                 cabin_seqnum,                 config_class_cd,                 seats_qty,                 cargo_capacity_weight          FROM   snapshot.snap_equipment_cabin_config) SELECT sec.party_role_id,        sec.equipment_type_id,        scc.service_type_cd,        sec.fleet_size_qty,        scc.service_haul_category_cd,        Coalesce(first_class.seats_qty,0)                      AS first_seats,        Coalesce(business_class.seats_qty,0)                   AS business_seats,        Coalesce(prem_economy.seats_qty,0)                     AS prem_economy_seats,        Coalesce(economy_class.seats_qty,0)                    AS economy_seats,        ( Coalesce(first_class.seats_qty, 0)          + Coalesce(business_class.seats_qty, 0)          + Coalesce(prem_economy.seats_qty, 0)          + Coalesce(economy_class.seats_qty, 0) ) AS total_seats,        Coalesce(freight_class.config_class_cd,'')              AS freight_class,        freight_class.cargo_capacity_weight AS freight_capacity,        sec.cargo_data_source_cd FROM   snapshot.snap_equipment_config sec        INNER JOIN snapshot.snap_config_combination scc                ON scc.config_combination_id = sec.config_combination_id        LEFT OUTER JOIN equipment_config first_class                     ON sec.equipment_config_id = first_class.equipment_config_id                        AND Ltrim(Rtrim(first_class.config_class_cd)) IN ( 'F' )        LEFT OUTER JOIN equipment_config business_class                     ON sec.equipment_config_id =                        business_class.equipment_config_id                        AND Ltrim(Rtrim(business_class.config_class_cd)) IN ( 'C' )        LEFT OUTER JOIN equipment_config prem_economy                     ON sec.equipment_config_id =                        prem_economy.equipment_config_id                        AND Ltrim(Rtrim(prem_economy.config_class_cd)) IN ( 'W' )        LEFT OUTER JOIN equipment_config economy_class                     ON sec.equipment_config_id =                        economy_class.equipment_config_id                        AND Ltrim(Rtrim(economy_class.config_class_cd)) IN ( 'Y' )        LEFT OUTER JOIN equipment_config freight_class                     ON sec.equipment_config_id =                        freight_class.equipment_config_id                        AND Length(Ltrim(Rtrim(freight_class.config_class_cd))) = 2 ORDER BY sec.party_role_id, sec.equipment_type_id, sec.fleet_size_qty desc, total_seats;
-- key: carrier_id, equipment_type_id, service_type_cd- used in iv_list_processor based on leg_seg: 5000, SeatsCache
SELECT carrier_id,        oag_cargo_duplicate_ind FROM   snapshot.snap_carrier WHERE  carrier_coding_end_date > '2017-10-31'       AND oag_cargo_duplicate_ind = 'Y';
-- key carrier_id: 17, used as a indicator set. CargoDuplicateIndicatorCache, looked up in IVListProcessor by carrier_id
SELECT carrier_id,        sched_version_id,        optional_element_num,        sched_deflt_optnl_elemt_value FROM   snapshot.snap_sched_default_optional_element;
-- this one is funny, key: carrier_id, sched_version_id, contains map optional_element_num -> sched_deflt_optnl_elemt_value, CarrierDefaultDEIValueCache: 1764
-- TODO:check length of the maps
SELECT carrier_id,        service_number,        ssvn.sched_version_name_id,        ssvn.sched_version_name,        departure_port_id,        arrival_port_id,        arrival_time,        otp_text || ' ' || LEFT(UPPER(MONTHNAME(otp_text_date)),3) || RIGHT(DIGITS(YEAR(otp_text_date)),2) as otp_value FROM   snapshot.snap_otp_history_text soht,        snapshot.snap_sched_version_name ssvn WHERE  ssvn.sched_version_name_id = soht.sched_version_name_id ORDER  BY soht.otp_text_date asc;
-- INTERESTING it is quite big 298773, OntimePerformance502Cache, key -> carrier_id, service_num, sched_version_name, dep_port_id, arr_port_id, SCHED_PAX_ARR_TIME, returns OTP_VALUE
-- select count(*) from (SELECT carrier_id,        service_number,        ssvn.sched_version_name_id,        ssvn.sched_version_name,        departure_port_id,        arrival_port_id,        arrival_time,        otp_text || ' ' || LEFT(UPPER(MONTHNAME(otp_text_date)),3) || RIGHT(DIGITS(YEAR(otp_text_date)),2) as otp_value FROM   snapshot.snap_otp_history_text soht,        snapshot.snap_sched_version_name ssvn WHERE  ssvn.sched_version_name_id = soht.sched_version_name_id ORDER  BY soht.otp_text_date asc);
SELECT carrier_id,        service_number,        ssvn.sched_version_name_id,        ssvn.sched_version_name,        departure_port_id,        arrival_port_id,        departure_time,        otp_pcnt,        decode(soh.pcnt_qualifier_cd,'T',rtrim(char(INTEGER (otp_pcnt))), soh.pcnt_qualifier_cd) ||  ' ' || LEFT(UPPER(MONTHNAME(soh.otp_date)),3) || RIGHT(DIGITS(YEAR(soh.otp_date)),2) as otp_value FROM   snapshot.snap_otp_history soh,        snapshot.snap_sched_version_name ssvn WHERE  ssvn.sched_version_name_id = soh.sched_version_name_id        AND soh.pcnt_qualifier_cd is not null ORDER  BY soh.otp_date asc;
-- select count(*) from (SELECT carrier_id,        service_number,        ssvn.sched_version_name_id,        ssvn.sched_version_name,        departure_port_id,        arrival_port_id,        departure_time,        otp_pcnt,        decode(soh.pcnt_qualifier_cd,'T',rtrim(char(INTEGER (otp_pcnt))), soh.pcnt_qualifier_cd) ||  ' ' || LEFT(UPPER(MONTHNAME(soh.otp_date)),3) || RIGHT(DIGITS(YEAR(soh.otp_date)),2) as otp_value FROM   snapshot.snap_otp_history soh,        snapshot.snap_sched_version_name ssvn WHERE  ssvn.sched_version_name_id = soh.sched_version_name_id        AND soh.pcnt_qualifier_cd is not null ORDER  BY soh.otp_date asc);
-- interestng ^ (191839), OntimePerformance501Cache, key: carrier_id, service_num, sched_version_name, dep_port_id, arr_port_id, SCHED_PAX_DEP_TIME
-- POSSIBLE BUG: sched_version_name is implied by sched_version_name_id
SELECT carrier_id,        ssvn.sched_version_name_id,        ssvn.sched_version_name,        srvc_num_1_digit_lead_zero_cnt,        srvc_num_2_digit_lead_zero_cnt,        srvc_num_3_digit_lead_zero_cnt FROM   snapshot.snap_carrier_sched_version scsn,        snapshot.snap_sched_version_name ssvn WHERE  ssvn.sched_version_name_id = scsn.sched_version_name_id AND  ( srvc_num_1_digit_lead_zero_cnt > 0        OR srvc_num_2_digit_lead_zero_cnt > 0        OR srvc_num_3_digit_lead_zero_cnt > 0 );
-- for padding: CarrierServiceZeroPaddingCache used in IVListProcessor, gets carrier_id from duplicate_leg, sched_version_name from leg_seg, service_num from duplicated_leg. Small 200.
-- possible bug padding may be implied by leg_seg.service_num
SELECT cc.CARRIER_ID, COALESCE(country.feature_cd, state.feature_cd) FEATURE_CD FROM SNAPSHOT.SNAP_PARTY_ROLE pr  JOIN SNAPSHOT.SNAP_PARTY_ROLE_NAME prn ON 	pr.PARTY_ROLE_ID = prn.PARTY_ROLE_ID 	AND prn.NAME_TYPE_ID =3 	AND CURRENT_DATE BETWEEN prn.EFF_START_DATE AND prn.EFF_END_DATE  LEFT JOIN (SELECT f.feature_id, fv.feature_default_name, fc.FEATURE_CD FROM SNAPSHOT.SNAP_FEATURE_VERSION fv     		   JOIN SNAPSHOT.SNAP_FEATURE f ON            	f.feature_id = fv.feature_id        		JOIN SNAPSHOT.SNAP_FEATURE_CODING fc ON        		f.FEATURE_ID= fc.FEATURE_ID                WHERE f.feature_type_id = 3                AND fc.CODING_SCHEME_ID=14                ) state      ON pr.OPER_BASE_FEATURE_ID = state.feature_id LEFT JOIN (SELECT f.feature_id, fv.feature_default_name, fc.FEATURE_CD FROM SNAPSHOT.SNAP_FEATURE_VERSION fv	        	JOIN SNAPSHOT.SNAP_FEATURE f ON	            f.feature_id = fv.feature_id	            JOIN SNAPSHOT.SNAP_FEATURE_CODING fc ON       		f.FEATURE_ID= fc.FEATURE_ID	        	WHERE f.feature_type_id = 1	        	AND fc.CODING_SCHEME_ID=2	        	) country	  ON country.feature_id = pr.OPER_BASE_FEATURE_ID LEFT JOIN SNAPSHOT.snap_feature_assoc fa ON				fa.FEATURE_TO_ID = state.feature_id				AND fa.FEATURE_ASSOC_TYPE_ID = 2 JOIN SNAPSHOT.SNAP_CARRIER_CODING cc       ON cc.CARRIER_ID = pr.PARTY_ROLE_ID GROUP BY cc.carrier_id, COALESCE(country.feature_cd, state.feature_cd);
-- 2222, CarrierCountryCache, key: carrier_id, IVListProcessor. retrieved by leg_seg.carrier_id
SELECT equipment_type_id,        default_cargo_class_cd FROM   snapshot.snap_equipment_type;
-- 358, EquipmentDefaultCargoClassCache, key: equipment_type_id (from LegSegRecord in IVListProcessor)
SELECT equipment_type_id,        equipment_type_cd FROM   snapshot.snap_equipment_coding WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'IATA Equipment Codes');
-- 358, EquipmentCodeIATACache, key: equipment_type_id (from LegSegRecord in IVListProcessor)
SELECT equipment_type_id,        equipment_type_cd FROM   snapshot.snap_equipment_coding WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'ICAO Equipment Codes');
-- 297, EquipmentCodeICAOCache, key: equipment_type_id (from LegSegRecord in IVListProcessor)
SELECT feature_id,        feature_cd FROM   snapshot.snap_feature_coding WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'IATA Location Codes - 3 Letter Codes')    AND effective_start_date <= '2017-10-31'   AND eff_end_date > '2017-10-31';
-- 21000, LocationCodeIATACache, key: dep_port_id | arr_port_id | els of ROUTING_FEATURE_ID_LIST (from LegSeg in IVListProcessor)
SELECT feature_id,        feature_cd FROM   snapshot.snap_feature_coding WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'IATA Terminal Codes')        AND effective_start_date <= '2017-10-31'       AND eff_end_date > '2017-10-31';
--703, AirportTerminalCache, DEP_TERMINAL_ID (from legseg in IVListProcessor)
SELECT feature_id,        feature_cd FROM   snapshot.snap_feature_coding WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'ICAO Location Codes')        AND effective_start_date <= '2017-10-31'       AND eff_end_date > '2017-10-31';
-- 12000, LocationCodeICAOCache, key: dep_port_id | arr_port_id from LegSeg in IVListProcessor)
SELECT f.FEATURE_ID, 		fv.LAT, 		fv.LONG FROM SNAPSHOT.snap_feature_version fv, 		SNAPSHOT.snap_feature_coding fc, 		SNAPSHOT.snap_feature_type ft, 		SNAPSHOT.snap_feature f WHERE f.FEATURE_TYPE_ID=ft.FEATURE_TYPE_ID 		AND fc.FEATURE_ID=f.FEATURE_ID 		AND fv.FEATURE_ID=f.FEATURE_ID 		AND ft.FEATURE_GROUP_ID=1;
-- 20329, PortCoordinatesCache, key: dep_port_id | arr_port_id

SELECT leg_seg_id,        optional_element_num,        OPTIONAL_ELEMENT_VALUE FROM   snapshot.SNAP_LEG_OPT_ELEMENT WHERE OPTIONAL_ELEMENT_NUM=504;
-- cache ^ 893000 C:\Users\Dell\projects\wdf-publisher\com\oag\wdf\master\cache\LegSegDefaultDEIValueCache.java, (from IVListProcessor LegSeg.Leg_seg_id, key: leg_seg_id
SELECT party_role_id,        party_role_name FROM   snapshot.snap_party_role_name WHERE  name_type_id = 3 AND eff_start_date <= '2017-10-31' AND eff_end_date > '2017-10-31';
-- 10289, CarrierNameCache, key: participant_id (id of elements from legSegRecord.getParticipantXML()), used in IVListProcessor
SELECT party_role_name_id,        party_role_name FROM   snapshot.snap_party_role_name WHERE  eff_start_date <= '2017-10-31' AND eff_end_date > '2017-10-31';
-- 13963, PartyRoleNameCache, key: participant_name_id (some attr of elements from legSegRecord.getParticipantXML()), used in IVListProcessor
SELECT prm.MEMBER_PARTY_ROLE_ID AS carrier_id, 			prl.parent_party_role_id AS alliance_id,         prnAlliance.party_role_name AS alliance FROM SNAPSHOT.snap_party_relationship_member prm     JOIN SNAPSHOT.snap_party_relationship prl ON         prl.relationship_id = prm.relationship_id         AND prl.relationship_type_id = 2         AND CURRENT_DATE BETWEEN prm.member_eff_start_date AND prm.member_eff_end_date     JOIN SNAPSHOT.snap_party_role_name prn ON         prn.party_role_id = member_party_role_id         AND prn.name_type_id = 3         AND CURRENT_DATE BETWEEN prn.eff_start_date AND prn.eff_end_date    JOIN SNAPSHOT.snap_party_role_name prnAlliance ON         prnAlliance.party_role_id = prl.parent_party_role_id         AND prnAlliance.name_type_id = 9     JOIN SNAPSHOT.snap_party_role prAlliance ON         prAlliance.party_role_id = prnAlliance.party_role_id     JOIN SNAPSHOT.snap_party_role pro ON         pro.party_role_id = prn.party_role_id;
-- 93, AllianceLookupCache, key: carrier_id from leg_seg from IVListProcessor
SELECT scc.carrier_id,        scc.scheme_carrier_cd FROM   snapshot.snap_carrier_coding scc WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'Airline Designator Codes')    AND scc.carrier_coding_start_date <= '2017-10-31'   AND scc.carrier_coding_end_date > '2017-10-31'UNION SELECT scc.carrier_id,        scc.scheme_carrier_cd FROM   snapshot.snap_carrier_coding scc WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'ICAO Codes - 3 Letter Codes')    AND NOT EXISTS(SELECT *                   FROM   snapshot.snap_carrier_coding scc1                   WHERE  scc1.carrier_id = scc.carrier_id                      AND scc1.coding_scheme_id = (SELECT coding_scheme_id                                                   FROM   snapshot.snap_coding_scheme                                                   WHERE  coding_scheme_name = 'Airline Designator Codes'))    AND scc.carrier_coding_start_date <= '2017-10-31'   AND scc.carrier_coding_end_date > '2017-10-31'UNION SELECT scc.carrier_id,        scc.scheme_carrier_cd FROM   snapshot.snap_carrier_coding scc WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'Cargo Codes')    AND NOT EXISTS(SELECT *                   FROM   snapshot.snap_carrier_coding scc1                   WHERE  scc1.carrier_id = scc.carrier_id                      AND scc1.coding_scheme_id IN (SELECT coding_scheme_id                                                    FROM   snapshot.snap_coding_scheme                                                    WHERE  coding_scheme_name IN( 'Airline Designator Codes', 'ICAO Codes - 3 Letter Codes' )))    AND scc.carrier_coding_start_date <= '2017-10-31'   AND scc.carrier_coding_end_date > '2017-10-31'UNION SELECT scc.carrier_id,        scc.scheme_carrier_cd FROM   snapshot.snap_carrier_coding scc WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE  coding_scheme_name = 'USPS Codes')    AND NOT EXISTS(SELECT *                   FROM   snapshot.snap_carrier_coding scc1                   WHERE  scc1.carrier_id = scc.carrier_id                      AND scc1.coding_scheme_id IN (SELECT coding_scheme_id                                                    FROM   snapshot.snap_coding_scheme                                                    WHERE  coding_scheme_name IN( 'Airline Designator Codes', 'ICAO Codes - 3 Letter Codes', 'Cargo Codes' )))    AND scc.carrier_coding_start_date <= '2017-10-31'   AND scc.carrier_coding_end_date > '2017-10-31';
-- 1942, CombinedCarrierCache, key: participant_id from (leg_seg.participant_xml ) | LEG_SEG.EQUIP_OWNER_CARRIER_ID |  leg_seg.EQUIP_CREW_CARRIER_ID | leg_seg.EQUIP_PILOT_CARRIER_ID | carrier_id from (leg_seg.Duplicate_Leg_XML) | leg_seg.carrier_id
SELECT scc.carrier_id,        scc.scheme_carrier_cd FROM   snapshot.snap_carrier_coding scc WHERE  coding_scheme_id = (SELECT coding_scheme_id                            FROM   snapshot.snap_coding_scheme                            WHERE        coding_scheme_name = 'ICAO Codes - 3 Letter Codes')        AND scc.carrier_coding_start_date <= '2017-10-31'       AND scc.carrier_coding_end_date > '2017-10-31';
-- 1662, CarrierCodeICAOCache, key: leg_seg.carrier_id
SELECT sfa.feature_from_id,        sfc.feature_cd FROM   snapshot.snap_feature_assoc sfa,        snapshot.snap_feature_coding sfc WHERE  sfa.feature_assoc_type_id IN (SELECT feature_assoc_type_id                                      FROM   snapshot.snap_feature_assoc_type                                      WHERE               feature_assoc_type_desc =               'Airport has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Rail Station has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Harbour has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Bus Station has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Offpoint has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Metropolitan Area has / Timezone Area is attached to')        AND sfa.feature_to_id = sfc.feature_id        AND sfc.coding_scheme_id = (SELECT coding_scheme_id                                    FROM   snapshot.snap_coding_scheme                                    WHERE            coding_scheme_name = 'IATA TimeZone Codes');
-- 22000, PortTimezoneIATACache, key: dep_port_id | arr_port_id
SELECT sfa.feature_from_id,        sfc.feature_cd FROM   snapshot.snap_feature_assoc sfa,        snapshot.snap_feature_coding sfc WHERE  sfa.feature_assoc_type_id IN (SELECT feature_assoc_type_id                                      FROM   snapshot.snap_feature_assoc_type                                      WHERE               feature_assoc_type_desc =               'Airport has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Rail Station has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Harbour has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Bus Station has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Offpoint has / Timezone Area is attached to'                OR feature_assoc_type_desc =                   'Metropolitan Area has / Timezone Area is attached to')        AND sfa.feature_to_id = sfc.feature_id        AND sfc.coding_scheme_id = (SELECT coding_scheme_id                                    FROM   snapshot.snap_coding_scheme                                    WHERE            coding_scheme_name = 'OAG TimeZone Codes');
-- 22000, PortTimezoneOAGCache, key: dep_port_id | arr_port_id
SELECT sfa.feature_to_id,        sfc.feature_cd FROM   snapshot.snap_feature_assoc sfa,        snapshot.snap_feature_coding sfc WHERE  sfa.feature_assoc_type_id IN (SELECT feature_assoc_type_id                                      FROM   snapshot.snap_feature_assoc_type                                      WHERE  feature_assoc_type_desc =               'Country has / Metropolitan Area is located in'                OR feature_assoc_type_desc =                   'Subcountry has / Metropolitan Area is located in')        AND sfc.coding_scheme_id = (SELECT coding_scheme_id                                    FROM   snapshot.snap_coding_scheme                                    WHERE            coding_scheme_name = 'ISO Country Codes')        AND sfa.feature_from_id = sfc.feature_id        AND sfc.effective_start_date <= '2017-10-31'       AND sfc.eff_end_date > '2017-10-31';
-- 11000, CityToCountryCache, key: leg_seg.dep_city_id | leg_seg.arr_city_id
SELECT sfa.feature_to_id,        sfc.feature_cd FROM   snapshot.snap_feature_assoc sfa,        snapshot.snap_feature_coding sfc WHERE  sfa.feature_assoc_type_id = (SELECT feature_assoc_type_id                                     FROM   snapshot.snap_feature_assoc_type                                     WHERE               feature_assoc_type_desc = 'State has / Airport is located in')        AND sfc.coding_scheme_id = (SELECT coding_scheme_id                                    FROM   snapshot.snap_coding_scheme                                    WHERE                coding_scheme_name = 'IATA State Codes - 2 Letter Codes')        AND sfa.feature_from_id = sfc.feature_id        AND sfc.effective_start_date <= '2017-10-31'       AND sfc.eff_end_date > '2017-10-31';
-- 3575, AirportToStateCache, key: leg_seg.ARR_PORT_ID | leg_seg.DEP_PORT_ID
SELECT sfa.feature_to_id,        sfc.feature_cd FROM   snapshot.snap_feature_coding sfc,        snapshot.snap_feature_assoc sfa WHERE  sfc.coding_scheme_id = (SELECT coding_scheme_id                                FROM   snapshot.snap_coding_scheme                                WHERE  coding_scheme_name = 'OAG Region Codes')        AND sfc.feature_id = sfa.feature_from_id        AND sfa.feature_assoc_type_id = (SELECT feature_assoc_type_id                                         FROM   snapshot.snap_feature_assoc_type                                         WHERE                feature_assoc_type_desc = 'Region has / Airport is Located in')        AND sfa.eff_end_date > '2017-10-31'        AND sfc.effective_start_date <= '2017-10-31'        AND sfc.eff_end_date > '2017-10-31';
--  1377: PortToRegionCache, key: leg_seg.ARR_PORT_ID | leg_seg.DEP_PORT_ID
SELECT sfc2.feature_cd as country_code,        sfc1.feature_cd as dot_code FROM   snapshot.snap_feature_coding sfc1,        snapshot.snap_feature_coding sfc2 WHERE  sfc1.coding_scheme_id = (SELECT coding_scheme_id                                 FROM   snapshot.snap_coding_scheme                                 WHERE  coding_scheme_name = 'DOT Country Codes')        AND sfc1.feature_id = sfc2.feature_id        AND sfc2.coding_scheme_id = (SELECT coding_scheme_id                                     FROM   snapshot.snap_coding_scheme                                     WHERE            coding_scheme_name = 'ISO Country Codes')        AND sfc1.effective_start_date <= '2017-10-31'        AND sfc1.eff_end_date > '2017-10-31'        AND sfc2.effective_start_date <= '2017-10-31'        AND sfc2.eff_end_date > '2017-10-31';
-- 237, CountryDotCodeCache, key: wdfRecord.dep_country_code (calced from leg_seg.dep_city_id through city_to_country_cache )
SELECT slg.leg_seg_id,        slg.iv_id,        slg.leg_seqnum,        slg.sched_version_id,        slg.sched_version_name,        slg.carrier_id,        slg.service_num,        slg.dep_port_id,        slg.arr_port_id,        slg.dep_city_id,        slg.arr_city_id,        slg.dep_terminal_id,        slg.arr_terminal_id,        Coalesce(slg.oper_prefix,'') as oper_prefix,        Coalesce(slg.oper_suffix,'') as oper_suffix,        slg.outbound_intl_dom_status_cd,        slg.inbound_intl_dom_status_cd,        slg.booking_class_xml,        slg.config_class_xml,        slg.optional_element_xml,        slg.routing_feature_id_list,        slg.duplicate_leg_xml,        slg.traffic_restriction_xml,        slg.participant_xml,        slg.partnership_xml,        slg.num_of_stops_cnt,        slg.great_circle_dist,        slg.equip_group_cd,        slg.equipment_type_id,        slg.equip_owner_carrier_id,        slg.equip_crew_carrier_id,        slg.equip_pilot_carrier_id,        slg.service_type_cd,        slg.sched_pax_dep_time,        slg.sched_pax_arr_time,        slg.elapsed_time_interval_mins,        slg.dep_dst_var_interval_mins,        slg.arr_dst_var_interval_mins,        slg.dep_std_var_interval_mins,        slg.arr_std_var_interval_mins,        slg.leg_seg_eff_start_date,        slg.leg_seg_eff_end_date,        slg.seg_arr_interval_days,        slg.oper_days_of_week,        slg.release_sell_start_date,        siv.last_update_timestamp,        ROW_NUMBER() OVER (PARTITION BY slg.iv_id ORDER BY slg.num_of_stops_cnt DESC, slg.leg_seqnum) AS ROWNUM FROM   snapshot.snap_leg_seg slg        INNER JOIN (SELECT SV.*,                           ROW_NUMBER()                             OVER(                               PARTITION BY sv.carrier_id,                             sv.sched_version_name_id                               ORDER BY sv.release_sell_start_date desc) AS ROWNO                    FROM   snapshot.snap_sched_version SV) AS ssv                ON slg.sched_version_id = ssv.sched_version_id                AND ssv.rowno = 1  INNER JOIN SNAPSHOT.SNAP_IV siv  ON slg.IV_ID = siv.IV_ID WHERE (NUM_OF_STOPS_CNT = 0 or (NUM_OF_STOPS_CNT > 0 and SEG_ENHANCED_IND = 'Y')) AND slg.LEG_SEG_EFF_END_DATE >=  '2017-10-31';

select count(*) from (SELECT slg.leg_seg_id,        slg.iv_id,        slg.leg_seqnum,        slg.sched_version_id,        slg.sched_version_name,        slg.carrier_id,        slg.service_num,        slg.dep_port_id,        slg.arr_port_id,        slg.dep_city_id,        slg.arr_city_id,        slg.dep_terminal_id,        slg.arr_terminal_id,        Coalesce(slg.oper_prefix,'') as oper_prefix,        Coalesce(slg.oper_suffix,'') as oper_suffix,        slg.outbound_intl_dom_status_cd,        slg.inbound_intl_dom_status_cd,        slg.booking_class_xml,        slg.config_class_xml,        slg.optional_element_xml,        slg.routing_feature_id_list,        slg.duplicate_leg_xml,        slg.traffic_restriction_xml,        slg.participant_xml,        slg.partnership_xml,        slg.num_of_stops_cnt,        slg.great_circle_dist,        slg.equip_group_cd,        slg.equipment_type_id,        slg.equip_owner_carrier_id,        slg.equip_crew_carrier_id,        slg.equip_pilot_carrier_id,        slg.service_type_cd,        slg.sched_pax_dep_time,        slg.sched_pax_arr_time,        slg.elapsed_time_interval_mins,        slg.dep_dst_var_interval_mins,        slg.arr_dst_var_interval_mins,        slg.dep_std_var_interval_mins,        slg.arr_std_var_interval_mins,        slg.leg_seg_eff_start_date,        slg.leg_seg_eff_end_date,        slg.seg_arr_interval_days,        slg.oper_days_of_week,        slg.release_sell_start_date,        siv.last_update_timestamp,        ROW_NUMBER() OVER (PARTITION BY slg.iv_id ORDER BY slg.num_of_stops_cnt DESC, slg.leg_seqnum) AS ROWNUM FROM   snapshot.snap_leg_seg slg        INNER JOIN (SELECT SV.*,                           ROW_NUMBER()                             OVER(                               PARTITION BY sv.carrier_id,                             sv.sched_version_name_id                               ORDER BY sv.release_sell_start_date desc) AS ROWNO                    FROM   snapshot.snap_sched_version SV) AS ssv                ON slg.sched_version_id = ssv.sched_version_id                AND ssv.rowno = 1  INNER JOIN SNAPSHOT.SNAP_IV siv  ON slg.IV_ID = siv.IV_ID WHERE (NUM_OF_STOPS_CNT = 0 or (NUM_OF_STOPS_CNT > 0 and SEG_ENHANCED_IND = 'Y')) AND slg.LEG_SEG_EFF_END_DATE >=  '2017-10-31');
-- 822809, legsegreader, leg_seg dot snap_iv

SELECT leg_seg_id,        leg_seg_eff_start_date,        leg_seg_eff_end_date,        oper_days_of_week,        ROW_NUMBER()          OVER (            PARTITION BY carrier_cd, service_num, sched_version_name, dep_port_cd, arr_port_cd, dep_time_lcl, arr_time_lcl, arr_interval_days, elapsed_time, stops, intmdte_ports, arcrft_change_marker, govt_approval_marker,          comment_10_50, spcfc_arcrft_type, service_type_cd, avl_seats, freight_tons, pax_class, freight_classes, restriction, dom_int_marker, full_routing, shared_airline_designator, arcrft_owner,          operating_marker, ghost_flght_marker, meals, dep_terminal_cd, arr_terminal_cd, oper_suffix, avl_seats_first, avl_seats_business, avl_seats_ecnmy, release_sell_start_date, secure_flght_marker,          in_flght_service, e_ticketing, cockpit_crew_provider, cabin_crew_provider, automated_check_in, on_time_performance_501,on_time_performance_502, avl_seats_prem_ecnmy, alliance, dup_leg_xml) AS rownum FROM   snapshot.wdf_master_data_enhanced;
-- 597860?, RationaliseRecordReader
SELECT leg_seg_id, 		  sched_version_name,        carrier_cd,       service_num_str,       leg_seg_eff_start_date,        leg_seg_eff_end_date,        oper_days_of_week,        dup_leg_xml,        operating_marker,        comment_10_50,		  dep_port_cd,			  arr_port_cd,			  dep_time_lcl,			  arr_time_lcl,			  arr_interval_days, 		  stops, 		  intmdte_ports,        ROW_NUMBER()          OVER (            PARTITION BY  dep_port_cd, arr_port_cd,          dep_time_lcl,          arr_time_lcl, arr_interval_days, stops, intmdte_ports            ORDER BY comment_10_50) AS ROWNUM FROM   snapshot.wdf_master_data_enhanced o where EXISTS (SELECT 1                FROM   snapshot.wdf_master_data_enhanced i                WHERE  i.dep_port_cd = o.dep_port_cd                       AND i.arr_port_cd = o.arr_port_cd                       AND i.dep_time_lcl = o.dep_time_lcl                       AND i.arr_time_lcl = o.arr_time_lcl                       AND i.arr_interval_days = o.arr_interval_days                       AND i.stops = o.stops                       AND i.intmdte_ports = o.intmdte_ports                       AND i.operating_marker = '') and  o.SCHED_VERSION_NAME = 'Schedules';
-- 237000, DupRecordReader, (O(N^2)?), what explain says?